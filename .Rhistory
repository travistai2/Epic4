0.87928057
0.888161708
1.90796054)
getwd(0)
getwd()
dat<-read.csv("./Desktop/testtt.csv")
hist(dat$Process)
hist(dat$Process,breaks = 10)
dat$exp<-exp(dat$Process)
hist(dat$exp,breaks = 10)
hist(dat$Process,breaks = 10)
dat$exp<-exp(dat$Process)
hist(dat$exp,breaks = 10)
dat$exp<-exp(dat$Process)
dat$log<-log(dat$Process)
hist(dat$log,breaks = 10)
mean(dat$log)
sd(dat$log)
dat<-read.csv("./Desktop/testtt.csv")
hist(dat$Process,breaks = 10)
dat$exp<-exp(dat$Process)
hist(dat$exp,breaks = 10)
dat$log<-log(dat$Process)
hist(dat$log,breaks = 10)
mean(dat$log)
sd(dat$log)
0.95/1.96
1/1.96
getwd()
source("/Users/travistai/Documents/RScripts/")
source("/Users/travistai/Documents/RScripts/ipak_func.R")
4.5*c1
c1<-1.380649*(10^-23)
c2<-8.617333262145*(10^-5)
c3<-1.380649*(10^-16)
4.5*c1
4.5*c2
4.5*c3
t1<-log(10)
t1
t1<-log10(10)
t1
10^t1
t1<-log(10)
exp(t1)
t1
exp(0.2107)
10^(0.2107)
1190.43/280
1/exp(0.2107)
exp(0.6757)
exp(4.355)
exp(0.2107)
100/30
a1<-100/30/2
a<-100/30
a<-100/30
a<-100/30
a1<-100/30/2
ta<-a1
for(i in 2:40){
print(ta)
ta<-ta+a
}
6*355
6*355 ## mL
2.69/.473 ## $/L
11.99/2.13 ##$/L
M<-0.2
exp(-M)
1-exp(-M)
exp(-M)
1-exp(-M)
1-exp(-M)+exp(-M)
C<-0.15
exp(-M-C)
-M-C
1-exp(-M-C)
A<-seq(10,2,-2)
A
M
sum(M*A/sum(A))
sum(A)
A/sum(A)
M*A/sum(A)
?png
install.packages("rvest")
url<-'http://www.seaaroundus.org/'
library(rvest)
webpage<-read_html(url)
View(webpage)
?srouce
?source
R1<-1.38*10^-23
R2<-8.617*10^-5
R3<-1.36*10^-16
j1<-4.5
j2<-8
j2*R1
j2*R2
exp(-j2/280)
temps<-273:300
exp(-j2/temps)
j2/temps
L_inf<-400
K<-0.5
L_inf*(1-exp(-K*T))
T
t1<-2
L_inf*(1-exp(-K*t1))
L_inf*(1-exp(-K*t1))
t1<-3
L_inf*(1-exp(-K*t1))
Linf<-400*1.06
L_inf<-400*1.06
L_inf
L_inf*(1-exp(-K*t1))
1*28/(1-28)*log(1/(2.4^((1-28/10))))
1*28/(1-28)*log(1/(2.4^((1-28)/10)))
1*28/(28-1)*log(1/(2.4^((28-1)/10)))
B<-8.617*10^-5
4.5*B
4500*B
8000*B
B*1*28/(1-28)*log(1/(2.4^((1-28)/10)))
B*1*28/(1-28)*log(1/(2.4^((1-28)/10)))/B
1*28/(1-28)
1*28/(28-1)*
1
B*1*28/(28-1)
log(1/(2.4^((1-28)/10)))
B*1*28/(28-1)*log(1/(2.4^((1-28)/10)))
1*28/(28-1)*log(1/(2.4^((1-28)/10)))
log(1/(2.4^((1-28)/10)))
(2.4^((1-28)/10))
log(1/(2.4))
1*28/(1-28)*log(1/(2.4))
(1-28)/10
log(1/(2.4^2.7))
log(1/(2.4^-2.7))
(64^3)*0.01
tmult.dat<-data.frame(t.Mult=c(-1,0,0))
tmult.dat<-data.frame(t.Mult=c(-1,0,0))
tmult.dat$t.Mult<0
while(tmult.dat$t.Mult<0){
tmult.dat$t.Mult<-rnorm(3,mean = 3,sd = 1)
}
any(tmult.dat$t.Mult<0)
tmult.dat
tmult.dat<-data.frame(t.Mult=c(-1,0,0))
any(tmult.dat$t.Mult<0)
tmult.dat<-data.frame(t.Mult=c(-1,0,0))
while(any(tmult.dat$t.Mult<0)){
tmult.dat$t.Mult<-rnorm(3,mean = 3,sd = 1)
}
rm(list=ls())
setwd("/Users/travistai/Documents/GitHub/Epic4/")  ## set working directory to location of files
## read in functions and libraries
source("./RScripts/Functions/ipak_func.R")
source("./RScripts/StockRecrFunc.R")
pckgs<-c("tidyverse","ggplot2")
ipak(pckgs)
## fisheries net profit data
fishprof.dat<-read.csv("./Data/Scen6NetProfitRicker.csv",header=T,strip.white=T,stringsAsFactors=F)
head(fishprof.dat)
## aquaculture net profit data
aquaprof.dat<-read.csv("./Data/NetProfitAquaculture.csv",header=T,strip.white=T,stringsAsFactors=F)
head(aquaprof.dat)
## multipliers data
mult.dat<-read.csv("./Data/Multipliers_20200729.csv",header=T,strip.white=T,stringsAsFactors=F)
head(mult.dat)
## multipliers data
mult.dat<-read.csv("./Data/Multipliers_20200729.csv",header=T,strip.white=T,stringsAsFactors=F)
head(mult.dat)
tempmult.dat<-mult.dat
mult.dat<-tempmult.dat %>% gather("Year","Multiplier",4:10) %>%
group_by(Economic.Indicators,Path,Sector) %>%
summarize(Mult_Mean = mean(Multiplier,na.rm=T),
Mult_SD = sd(Multiplier,na.rm=T))
write.csv(mult.dat,"./Tables/MultiplerTableMeanSD.csv",row.names = F)
## hatchery release data
model.dat<-read.csv("./Data/SimModelValues.csv",header=T,strip.white=T,stringsAsFactors=F)
## stock recruit parameter data
storec.dat<-read.csv("./Data/StockRecruitValues.csv",header=T,strip.white=T,stringsAsFactors=F)
## simulation parameters
set.seed(1)  ## set random seed to start at the same point (for reproducability of stochastic model)
iter<-10000  ## number of iterations - do 10000 then sample from 10000
n_years<-2014:2050
## model value parameters
d_rate<-0.08  ## discount rate: Canada = 8%
d_year<-2020  ## discount year start; Bendriem start = 2018; we start at 2020
rel_Year<-2020  ## relative year to start harvesting when survival increases
mult.cate<-unique(mult.dat$Economic.Indicators)  ## multiplier categories
mean_bodysize<-3.46  ## mean body size of coho kg
exv_price<-3.02  ## ex vessel price $/kg
costfishing_weekly<-3391.2  ## fishing cost $/week
Spawn2011to13<-c(25487,54832,58641)  ## historical spawners data: 2011-2013
tar_esc<-40000  ## target escapement
## stock recruit parameters  CHECK TABLE storec.dat TO ENSURE CORRECT VALUES
alphalo_mean<-storec.dat$Value[1]
alphalo_SE<-storec.dat$StandardError[1]
xvar1lo_mean<-storec.dat$Value[2]
xvar1lo_SE<-storec.dat$StandardError[2]
alphahi_mean<-storec.dat$Value[3]
alphahi_SE<-storec.dat$StandardError[3]
xvar1hi_mean<-storec.dat$Value[4]
xvar1hi_SE<-storec.dat$StandardError[4]
stockrec.out<-list() ## empty matrix for stock recruit data (row = years; column = variables; z = iteration)
econ.out<-list() ## create empty list (rows = years #; column = econ.indicator; z = iterations)
iter.ind<-as.data.frame(matrix(nrow=iter,ncol=12)) ## data frame for iteration indicator analysis
names(iter.ind)<-c("iter",
"harvest_areaG","total_escape","total_return","wild_return",
"harvest_annual",
mult.cate,
"netpresentvalue","netprofit_annual")
p1<-ggplot()  ## set up ggplot to plot stock recruit results
p2<-ggplot()  ## set up ggplot to plot economic results
for(i in 1:iter){  ## stochastic stock recruit component
## set stochastic stock recruit parameter
## run stock recruit simulation
tout.dat<-stockRecr(init.spawn = Spawn2011to13,years = n_years,
sim.dat = model.dat,
model="Ricker",
relYr = rel_Year) %>%
mutate(total_return = age3_ret + hatch_return,
harvest = ifelse(Year>=rel_Year+2,exp_rate*total_return,0),
harvest_areaG = harvest*0.9) %>%
left_join((model.dat %>% select(Year,Catchability)),by = "Year") %>%
mutate(effort = harvest_areaG/(Catchability*age3_ret)) %>%
replace_na(list(Catchability=0,effort=0)) %>%
mutate(LV = harvest_areaG * exv_price * mean_bodysize,
fishingcost_season = ifelse(Year>=rel_Year+2,effort*costfishing_weekly+120000,0),
net_revenue = LV - fishingcost_season,
implement_cost = ifelse(Year>=rel_Year,9200,0),
net_profit = net_revenue-implement_cost)
## store stock recruit data
stockrec.out[[i]]<-tout.dat
}
for(i in 1:iter){  ## stochastic economic multipliers component
## subset net profit data, and setup discount year start = 2020
#tfishprof.dat<-tout.dat %>% select(Year,net_profit) %>%
#  filter(Year>=n_years[1]) %>%
#  mutate(t_init = ifelse(Year>=d_year,Year-d_year,0))
tfishprof.dat<-stockrec.out[[i]] %>% select(Year,net_profit) %>%
filter(Year>=n_years[1]) %>%
mutate(t_init = ifelse(Year>=d_year,Year-d_year,0))
tyears<-tfishprof.dat$Year
tout.dat2<-data.frame()
for(j in 1:length(tyears)){  ## generate random multipler from mean and SD
tmult.dat<-data.frame(t.Mult=-1)
while(any(tmult.dat$t.Mult<0)){
tmult.dat<-as.data.frame(mult.dat) %>% mutate(t.Mult = apply(mult.dat,1,FUN = function(x){
rnorm(1, mean = as.numeric(x[4]), sd = as.numeric(x[5]))}))
}
tmult.dat<-tmult.dat %>%
filter(Sector %in% c("Fisheries","Processing")) %>%
select(-Mult_Mean,-Mult_SD) %>%
mutate(Year = tyears[j],
net_profit = tfishprof.dat$net_profit[j],
t_init = tfishprof.dat$t_init[j])
tout.dat2<-tout.dat2 %>% bind_rows(tmult.dat)
}
## estimate NPV with random generated multipler
tout.dat2<-tout.dat2 %>%
mutate(NPV = net_profit*t.Mult/(1+d_rate)^t_init)
econ.out[[i]]<-tout.dat2
rm(tout.dat2,tmult.dat)
}
for(i in 1:iter){  ## output of indicators over entire time series
## subset stock recruit data
tdat<-stockrec.out[[i]] %>%
mutate(t_init = ifelse(Year>=d_year,Year-d_year,0))
## store summed time series iteration data
temp.iter.dat<-tdat %>% select(harvest_areaG,total_escape,total_return,age3_ret) %>%
summarize(harvest_areaG = sum(harvest_areaG,na.rm=T),
total_escape = sum(total_escape,na.rm=T),
total_return = sum(total_return,na.rm=T),
wild_return = sum(age3_ret,na.rm=T)) %>%
bind_cols(tdat %>% filter(Year>=2020) %>%
summarize(harvest_annual = mean(harvest_areaG,na.rm=T)))
## econ data subset
tecon<-econ.out[[i]]  %>%
group_by(Economic.Indicators,Year) %>%
summarize(NPV = sum(NPV))
iter.ind[i,1]<-i
iter.ind[i,2:6]<-temp.iter.dat
iter.ind[i,7]<-sum(tecon$NPV[which(tecon$Economic.Indicators=="Employment")])
iter.ind[i,8]<-sum(tecon$NPV[which(tecon$Economic.Indicators=="GDP")])
iter.ind[i,9]<-sum(tecon$NPV[which(tecon$Economic.Indicators=="LabourIncome")])
iter.ind[i,10]<-sum(tecon$NPV[which(tecon$Economic.Indicators=="Output")])
iter.ind[i,11]<-sum((tdat$net_profit/(1+d_rate)^tdat$t_init),na.rm=T)
iter.ind[i,12]<-mean(tdat$net_profit,na.rm=T)
rm(tdat,temp.iter.dat,tecon)
}
##### TESTING FOR OPTIMAL NUMBER OF ITERATIONS #####
set.seed(100)
c.iter<-rep(seq(100,10000,100),each=1)
conv.dat<-data.frame()
for(i in 1:length(c.iter)){
tsample.dat<-iter.ind %>% sample_n(c.iter[i],replace=T) %>%
summarize(iterations = c.iter[i],
netprof_mean = mean(netpresentvalue,na.rm=T),
netprof_SE = sd(netpresentvalue,na.rm=T)/sqrt(c.iter[i]),
netprof_50 = quantile(netpresentvalue,0.5,na.rm=T),
netprof_70 = quantile(netpresentvalue,0.7,na.rm=T),
netprof_90 = quantile(netpresentvalue,0.9,na.rm=T),
netprof_95 = quantile(netpresentvalue,0.95,na.rm=T),
annnetprof_mean = mean(netprofit_annual,na.rm=T),
annnetprof_SE = sd(netprofit_annual,na.rm=T)/sqrt(c.iter[i]))
conv.dat<-conv.dat %>% bind_rows(tsample.dat)
rm(tsample.dat)
}
plot.dat<-conv.dat %>%
mutate(permean = abs(100*(netprof_mean-netprof_mean[length(c.iter)])/
netprof_mean[length(c.iter)]),
per_ann = abs(100*(annnetprof_mean-annnetprof_mean[length(c.iter)])/
annnetprof_mean[length(c.iter)]),
per50 = abs(100*(netprof_50-netprof_50[length(c.iter)])/
netprof_50[length(c.iter)]),
per70 = abs(100*(netprof_70-netprof_70[length(c.iter)])/
netprof_70[length(c.iter)]),
per90 = abs(100*(netprof_90-netprof_90[length(c.iter)])/
netprof_90[length(c.iter)]),
per95 = abs(100*(netprof_95-netprof_95[length(c.iter)])/
netprof_95[length(c.iter)])) %>%
gather("percentile", "value",12:15)
p.iter<-ggplot(plot.dat)
p.iter + geom_line(aes(x = iterations, y=netprof_mean))
p.iter + geom_line(aes(x = iterations, y=netprof_SE))
p.iter + geom_line(aes(x = iterations, y=annnetprof_mean))
p.iter + geom_line(aes(x = iterations, y=annnetprof_SE))
p1f<-p.iter + theme(axis.title = element_text(size = 8),
axis.text = element_text(size = 7),
legend.text = element_text(size = 7),
legend.title = element_text(size=7)) +
geom_line(aes(x = iterations, y = value, col = percentile),lwd=0.25) +
geom_smooth(aes(x = iterations, y = value, col = percentile),method = "loess",lwd=0.6) +
geom_vline(xintercept = 4000, lty = 2, lwd= 0.2) +
labs(x = "Iterations",
y = "Absolute % difference from 10k\niteration results") +
scale_colour_discrete(name = "Percentile", labels = c("50th","70th","90th","95th"))
p1f
pdf("./Plots/IterConvAnalysis.pdf",width = 3.5, height = 2)
p1f
dev.off()
set.seed(100)
opt.iter<-4000
n_samp<-sample(c(1:iter),opt.iter,replace = F)
sum.dat<-data.frame()
i<-n_samp[1]
tdat<-econ.out[[i]]
View(tdat)
tdat<-econ.out[[i]] %>%
group_by(Economic.Indicators,Path,Sector) %>%
summarize(NPV = sum(NPV, na.rm=T))
rm(tdat)
rm(p1,p2)
rm(conv.dat,plot.dat,p.iter,p1f)
set.seed(100)
opt.iter<-4000
n_samp<-sample(c(1:iter),opt.iter,replace = F)
sum.dat<-data.frame()
for(i in n_samp){
tdat<-econ.out[[i]] %>%
group_by(Economic.Indicators,Path,Sector) %>%
summarize(NPV = sum(NPV, na.rm=T))
tdat2<-tdat %>% group_by(Economic.Indicators) %>%
summarize(NPV = sum(NPV, na.rm=T)) %>%
mutate(Path = "Total")
tdat<-tdat %>% bind_rows(tdat2)
if(i==n_samp[1]){
sum.dat<-tdat
} else {
sum.dat<-sum.dat %>%
left_join(tdat,by = c("Economic.Indicators","Path"))
}
rm(tdat,tdat2)
}
set.seed(100)
opt.iter<-3000
n_samp<-sample(c(1:iter),opt.iter,replace = F)
sum.dat<-data.frame()
for(i in n_samp){
tdat<-econ.out[[i]] %>%
group_by(Economic.Indicators,Path,Sector) %>%
summarize(NPV = sum(NPV, na.rm=T))
tdat2<-tdat %>% group_by(Economic.Indicators) %>%
summarize(NPV = sum(NPV, na.rm=T)) %>%
mutate(Path = "Total")
tdat<-tdat %>% bind_rows(tdat2)
if(i==n_samp[1]){
sum.dat<-tdat
} else {
sum.dat<-sum.dat %>%
left_join(tdat,by = c("Economic.Indicators","Path"))
}
rm(tdat,tdat2)
}
Sys.setenv('R_MAX_VSIZE'=32000000000)
set.seed(100)
opt.iter<-4000
n_samp<-sample(c(1:iter),opt.iter,replace = F)
sum.dat<-data.frame()
for(i in n_samp){
tdat<-econ.out[[i]] %>%
group_by(Economic.Indicators,Path,Sector) %>%
summarize(NPV = sum(NPV, na.rm=T))
tdat2<-tdat %>% group_by(Economic.Indicators) %>%
summarize(NPV = sum(NPV, na.rm=T)) %>%
mutate(Path = "Total")
tdat<-tdat %>% bind_rows(tdat2)
if(i==n_samp[1]){
sum.dat<-tdat
} else {
sum.dat<-sum.dat %>%
left_join(tdat,by = c("Economic.Indicators","Path"))
}
rm(tdat,tdat2)
}
setwd("/Users/travistai/Documents/GitHub/Epic4/")  ## set working directory to location of files
## read in functions and libraries
source("./RScripts/Functions/ipak_func.R")
source("./RScripts/StockRecrFunc.R")
pckgs<-c("tidyverse","ggplot2")
ipak(pckgs)
set.seed(100)
opt.iter<-4000
n_samp<-sample(c(1:iter),opt.iter,replace = F)
sum.dat<-data.frame()
for(i in n_samp){
tdat<-econ.out[[i]] %>%
group_by(Economic.Indicators,Path,Sector) %>%
summarize(NPV = sum(NPV, na.rm=T))
tdat2<-tdat %>% group_by(Economic.Indicators) %>%
summarize(NPV = sum(NPV, na.rm=T)) %>%
mutate(Path = "Total")
tdat<-tdat %>% bind_rows(tdat2)
if(i==n_samp[1]){
sum.dat<-tdat
} else {
sum.dat<-sum.dat %>%
left_join(tdat,by = c("Economic.Indicators","Path"))
}
rm(tdat,tdat2)
}
Sys.setenv('R_MAX_VSIZE'=32000000000)
set.seed(100)
opt.iter<-4000
n_samp<-sample(c(1:iter),opt.iter,replace = F)
sum.dat<-data.frame()
for(i in n_samp){
tdat<-econ.out[[i]] %>%
group_by(Economic.Indicators,Path,Sector) %>%
summarize(NPV = sum(NPV, na.rm=T))
tdat2<-tdat %>% group_by(Economic.Indicators) %>%
summarize(NPV = sum(NPV, na.rm=T)) %>%
mutate(Path = "Total")
tdat<-tdat %>% bind_rows(tdat2)
if(i==n_samp[1]){
sum.dat<-tdat
} else {
sum.dat<-sum.dat %>%
left_join(tdat,by = c("Economic.Indicators","Path"))
}
rm(tdat,tdat2)
}
set.seed(100)
opt.iter<-1000
n_samp<-sample(c(1:iter),opt.iter,replace = F)
sum.dat<-data.frame()
for(i in n_samp){
tdat<-econ.out[[i]] %>%
group_by(Economic.Indicators,Path,Sector) %>%
summarize(NPV = sum(NPV, na.rm=T))
tdat2<-tdat %>% group_by(Economic.Indicators) %>%
summarize(NPV = sum(NPV, na.rm=T)) %>%
mutate(Path = "Total")
tdat<-tdat %>% bind_rows(tdat2)
if(i==n_samp[1]){
sum.dat<-tdat
} else {
sum.dat<-sum.dat %>%
left_join(tdat,by = c("Economic.Indicators","Path"))
}
rm(tdat,tdat2)
}
i
tdat<-econ.out[[i]] %>%
group_by(Economic.Indicators,Path,Sector) %>%
summarize(NPV = sum(NPV, na.rm=T))
tdat2<-tdat %>% group_by(Economic.Indicators) %>%
summarize(NPV = sum(NPV, na.rm=T)) %>%
mutate(Path = "Total")
rm(tdat,tdat2)
tdat<-econ.out[[i]] %>%
group_by(Economic.Indicators,Path,Sector) %>%
summarize(NPV = sum(NPV, na.rm=T))
tdat2<-tdat %>% group_by(Economic.Indicators) %>%
summarize(NPV = sum(NPV, na.rm=T)) %>%
mutate(Path = "Total")
tdat<-tdat %>% bind_rows(tdat2)
if(i==n_samp[1]){
sum.dat<-tdat
} else {
sum.dat<-sum.dat %>%
left_join(tdat,by = c("Economic.Indicators","Path","Sector"))
}
set.seed(100)
opt.iter<-4000
n_samp<-sample(c(1:iter),opt.iter,replace = F)
sum.dat<-data.frame()
i<-n_samp[1]
